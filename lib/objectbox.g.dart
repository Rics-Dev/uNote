// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/entities.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 2525910216294555939),
      name: 'Tag',
      lastPropertyId: const obx_int.IdUid(2, 1342849585998960233),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 874380121498479823),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1342849585998960233),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(3, 9194883798312277152))
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 785102049100997188),
            name: 'tasks',
            targetId: const obx_int.IdUid(2, 7031062309905276887)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(3, 6593666496360618030),
            name: 'notes',
            targetId: const obx_int.IdUid(4, 6582988619389156410))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 7031062309905276887),
      name: 'Task',
      lastPropertyId: const obx_int.IdUid(9, 7171793210229252129),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3810691487880848457),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1479964507661502863),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1782731273622668282),
            name: 'details',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 663130033217488082),
            name: 'isDone',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 139932126585363655),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4684119550418647710),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3187731120692335531),
            name: 'dueDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1759390588833332395),
            name: 'priority',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7171793210229252129),
            name: 'listId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 7409048701794538828),
            relationTarget: 'TaskList')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(name: 'tags', srcEntity: 'Tag', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 2058075289807397123),
      name: 'TaskList',
      lastPropertyId: const obx_int.IdUid(4, 7528955827386445251),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5373579064961947165),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4591405483709773286),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4021608252984671368),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7528955827386445251),
            name: 'updatedAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(name: 'tasks', srcEntity: 'Task', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 6582988619389156410),
      name: 'Note',
      lastPropertyId: const obx_int.IdUid(9, 1200123794600520156),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1744807741711115826),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3709443565666971693),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5790417944814782457),
            name: 'content',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6017248645263383727),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8674644191856380858),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5639902291895940951),
            name: 'notebookId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 6158637978171915309),
            relationTarget: 'NoteBook'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1490756995180579565),
            name: 'json',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4814409593105775692),
            name: 'isSecured',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1200123794600520156),
            name: 'isFavorite',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(name: 'tags', srcEntity: 'Tag', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 1891198414133088334),
      name: 'NoteBook',
      lastPropertyId: const obx_int.IdUid(4, 7425348356299112206),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6296233523745376924),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6533682516401497984),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8314748196248704566),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7425348356299112206),
            name: 'updatedAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(name: 'notes', srcEntity: 'Note', srcField: '')
      ])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(5, 1891198414133088334),
      lastIndexId: const obx_int.IdUid(4, 6158637978171915309),
      lastRelationId: const obx_int.IdUid(3, 6593666496360618030),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [5318798887338303490],
      retiredPropertyUids: const [],
      retiredRelationUids: const [1612697448648994606],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Tag: obx_int.EntityDefinition<Tag>(
        model: _entities[0],
        toOneRelations: (Tag object) => [],
        toManyRelations: (Tag object) => {
              obx_int.RelInfo<Tag>.toMany(2, object.id): object.tasks,
              obx_int.RelInfo<Tag>.toMany(3, object.id): object.notes
            },
        getId: (Tag object) => object.id,
        setId: (Tag object, int id) {
          object.id = id;
        },
        objectToFB: (Tag object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Tag(id: idParam, name: nameParam);
          obx_int.InternalToManyAccess.setRelInfo<Tag>(
              object.tasks, store, obx_int.RelInfo<Tag>.toMany(2, object.id));
          obx_int.InternalToManyAccess.setRelInfo<Tag>(
              object.notes, store, obx_int.RelInfo<Tag>.toMany(3, object.id));
          return object;
        }),
    Task: obx_int.EntityDefinition<Task>(
        model: _entities[1],
        toOneRelations: (Task object) => [object.list],
        toManyRelations: (Task object) =>
            {obx_int.RelInfo<Tag>.toManyBacklink(2, object.id): object.tags},
        getId: (Task object) => object.id,
        setId: (Task object, int id) {
          object.id = id;
        },
        objectToFB: (Task object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final detailsOffset = fbb.writeString(object.details);
          final priorityOffset = object.priority == null
              ? null
              : fbb.writeString(object.priority!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, detailsOffset);
          fbb.addBool(3, object.isDone);
          fbb.addInt64(4, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(5, object.updatedAt.millisecondsSinceEpoch);
          fbb.addInt64(6, object.dueDate?.millisecondsSinceEpoch);
          fbb.addOffset(7, priorityOffset);
          fbb.addInt64(8, object.list.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dueDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final detailsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final isDoneParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final dueDateParam = dueDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(dueDateValue);
          final priorityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final object = Task(
              id: idParam,
              name: nameParam,
              details: detailsParam,
              isDone: isDoneParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam,
              dueDate: dueDateParam,
              priority: priorityParam);
          object.list.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.list.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Task>(object.tags, store,
              obx_int.RelInfo<Tag>.toManyBacklink(2, object.id));
          return object;
        }),
    TaskList: obx_int.EntityDefinition<TaskList>(
        model: _entities[2],
        toOneRelations: (TaskList object) => [],
        toManyRelations: (TaskList object) => {
              obx_int.RelInfo<Task>.toOneBacklink(
                      9, object.id, (Task srcObject) => srcObject.list):
                  object.tasks
            },
        getId: (TaskList object) => object.id,
        setId: (TaskList object, int id) {
          object.id = id;
        },
        objectToFB: (TaskList object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(3, object.updatedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final object = TaskList(
              id: idParam,
              name: nameParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam);
          obx_int.InternalToManyAccess.setRelInfo<TaskList>(
              object.tasks,
              store,
              obx_int.RelInfo<Task>.toOneBacklink(
                  9, object.id, (Task srcObject) => srcObject.list));
          return object;
        }),
    Note: obx_int.EntityDefinition<Note>(
        model: _entities[3],
        toOneRelations: (Note object) => [object.notebook],
        toManyRelations: (Note object) =>
            {obx_int.RelInfo<Tag>.toManyBacklink(3, object.id): object.tags},
        getId: (Note object) => object.id,
        setId: (Note object, int id) {
          object.id = id;
        },
        objectToFB: (Note object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final contentOffset = fbb.writeString(object.content);
          final jsonOffset = fbb.writeString(object.json);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, contentOffset);
          fbb.addInt64(3, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(4, object.updatedAt.millisecondsSinceEpoch);
          fbb.addInt64(5, object.notebook.targetId);
          fbb.addOffset(6, jsonOffset);
          fbb.addBool(7, object.isSecured);
          fbb.addBool(8, object.isFavorite);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final jsonParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final isSecuredParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final isFavoriteParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = Note(
              id: idParam,
              title: titleParam,
              content: contentParam,
              json: jsonParam,
              isSecured: isSecuredParam,
              isFavorite: isFavoriteParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam);
          object.notebook.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.notebook.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Note>(object.tags, store,
              obx_int.RelInfo<Tag>.toManyBacklink(3, object.id));
          return object;
        }),
    NoteBook: obx_int.EntityDefinition<NoteBook>(
        model: _entities[4],
        toOneRelations: (NoteBook object) => [],
        toManyRelations: (NoteBook object) => {
              obx_int.RelInfo<Note>.toOneBacklink(
                      6, object.id, (Note srcObject) => srcObject.notebook):
                  object.notes
            },
        getId: (NoteBook object) => object.id,
        setId: (NoteBook object, int id) {
          object.id = id;
        },
        objectToFB: (NoteBook object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(3, object.updatedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final object = NoteBook(
              id: idParam,
              name: nameParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam);
          obx_int.InternalToManyAccess.setRelInfo<NoteBook>(
              object.notes,
              store,
              obx_int.RelInfo<Note>.toOneBacklink(
                  6, object.id, (Note srcObject) => srcObject.notebook));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Tag] entity fields to define ObjectBox queries.
class Tag_ {
  /// See [Tag.id].
  static final id = obx.QueryIntegerProperty<Tag>(_entities[0].properties[0]);

  /// See [Tag.name].
  static final name = obx.QueryStringProperty<Tag>(_entities[0].properties[1]);

  /// see [Tag.tasks]
  static final tasks =
      obx.QueryRelationToMany<Tag, Task>(_entities[0].relations[0]);

  /// see [Tag.notes]
  static final notes =
      obx.QueryRelationToMany<Tag, Note>(_entities[0].relations[1]);
}

/// [Task] entity fields to define ObjectBox queries.
class Task_ {
  /// See [Task.id].
  static final id = obx.QueryIntegerProperty<Task>(_entities[1].properties[0]);

  /// See [Task.name].
  static final name = obx.QueryStringProperty<Task>(_entities[1].properties[1]);

  /// See [Task.details].
  static final details =
      obx.QueryStringProperty<Task>(_entities[1].properties[2]);

  /// See [Task.isDone].
  static final isDone =
      obx.QueryBooleanProperty<Task>(_entities[1].properties[3]);

  /// See [Task.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Task>(_entities[1].properties[4]);

  /// See [Task.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<Task>(_entities[1].properties[5]);

  /// See [Task.dueDate].
  static final dueDate =
      obx.QueryDateProperty<Task>(_entities[1].properties[6]);

  /// See [Task.priority].
  static final priority =
      obx.QueryStringProperty<Task>(_entities[1].properties[7]);

  /// See [Task.list].
  static final list =
      obx.QueryRelationToOne<Task, TaskList>(_entities[1].properties[8]);
}

/// [TaskList] entity fields to define ObjectBox queries.
class TaskList_ {
  /// See [TaskList.id].
  static final id =
      obx.QueryIntegerProperty<TaskList>(_entities[2].properties[0]);

  /// See [TaskList.name].
  static final name =
      obx.QueryStringProperty<TaskList>(_entities[2].properties[1]);

  /// See [TaskList.createdAt].
  static final createdAt =
      obx.QueryDateProperty<TaskList>(_entities[2].properties[2]);

  /// See [TaskList.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<TaskList>(_entities[2].properties[3]);

  /// see [TaskList.tasks]
  static final tasks = obx.QueryBacklinkToMany<Task, TaskList>(Task_.list);
}

/// [Note] entity fields to define ObjectBox queries.
class Note_ {
  /// See [Note.id].
  static final id = obx.QueryIntegerProperty<Note>(_entities[3].properties[0]);

  /// See [Note.title].
  static final title =
      obx.QueryStringProperty<Note>(_entities[3].properties[1]);

  /// See [Note.content].
  static final content =
      obx.QueryStringProperty<Note>(_entities[3].properties[2]);

  /// See [Note.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Note>(_entities[3].properties[3]);

  /// See [Note.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<Note>(_entities[3].properties[4]);

  /// See [Note.notebook].
  static final notebook =
      obx.QueryRelationToOne<Note, NoteBook>(_entities[3].properties[5]);

  /// See [Note.json].
  static final json = obx.QueryStringProperty<Note>(_entities[3].properties[6]);

  /// See [Note.isSecured].
  static final isSecured =
      obx.QueryBooleanProperty<Note>(_entities[3].properties[7]);

  /// See [Note.isFavorite].
  static final isFavorite =
      obx.QueryBooleanProperty<Note>(_entities[3].properties[8]);
}

/// [NoteBook] entity fields to define ObjectBox queries.
class NoteBook_ {
  /// See [NoteBook.id].
  static final id =
      obx.QueryIntegerProperty<NoteBook>(_entities[4].properties[0]);

  /// See [NoteBook.name].
  static final name =
      obx.QueryStringProperty<NoteBook>(_entities[4].properties[1]);

  /// See [NoteBook.createdAt].
  static final createdAt =
      obx.QueryDateProperty<NoteBook>(_entities[4].properties[2]);

  /// See [NoteBook.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<NoteBook>(_entities[4].properties[3]);

  /// see [NoteBook.notes]
  static final notes = obx.QueryBacklinkToMany<Note, NoteBook>(Note_.notebook);
}
